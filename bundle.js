(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var metals = require("./metals");
function createMetalNumberInput(prefix, metal, metalPropertyName, additionalOnChange) {
    var input = document.createElement('input');
    input.value = metal.buffered_metal_concentration.toString();
    input.classList.add(prefix);
    input.id = prefix + '_' + metal.id_suffix;
    input.type = 'number';
    input.addEventListener('change', function (event) {
        var _a;
        var val = event.target.value;
        var floatVal = parseFloat(val); // TODO: validation!
        var m = metals.all_metals[metal.id_suffix];
        Object.assign(m, (_a = {}, _a[metalPropertyName] = floatVal, _a));
        if (additionalOnChange)
            additionalOnChange(metal.id_suffix);
    });
    return input;
}
function appendMetalTableRow(metal, table) {
    var row = table.insertRow(table.rows.length - 1);
    row.insertCell(-1).outerHTML = "<th>" + metal.symbol + "</th>";
    var affinity_cell = row.insertCell(-1);
    affinity_cell.classList.add('affinity');
    var affinity_input = createMetalNumberInput('affinity', metal, 'affinity', function (id) {
        var m = metals.all_metals[id];
        m.metalation_delta_G = m.calculateDeltaG(m.affinity);
        // FIXME: change this to be watched by Metal?
        document.getElementById("metalation_delta_g_" + id).innerText = m.metalation_delta_G.toFixed(1).toString();
    });
    affinity_cell.appendChild(affinity_input);
    var m_delta_g_cell = row.insertCell(-1);
    m_delta_g_cell.id = "metalation_delta_g_" + metal.id_suffix;
    m_delta_g_cell.innerText = metal.metalation_delta_G.toFixed(1).toString();
    var bmc_cell = row.insertCell(-1);
    bmc_cell.classList.add('bmc');
    var bmc_input = createMetalNumberInput('bmc', metal, 'buffered_metal_concentration', function (id) {
        var m = metals.all_metals[id];
        m.intracellular_available_delta_G = m.calculateDeltaG(m.buffered_metal_concentration);
        //FIXME: change this to be watched by Metal?
        document.getElementById("ia_delta_g_" + id).value = m.intracellular_available_delta_G.toString();
    });
    bmc_cell.appendChild(bmc_input);
    var ia_delta_g_cell = row.insertCell(-1);
    var ia_delta_g_input = createMetalNumberInput('ia_delta_g', metal, 'intracellular_available_delta_G', null);
    ia_delta_g_cell.appendChild(ia_delta_g_input);
    var result_cell = row.insertCell(-1);
    result_cell.id = "result_" + metal.id_suffix;
}
function calculate() {
    var results = metals.calculateOccupancy();
    for (var id in metals.all_metals) {
        var r = results[id];
        var result_cell = document.getElementById("result_" + id);
        result_cell.innerHTML = (r * 100).toFixed(2).toString() + '%';
    }
    var total_cell = document.getElementById("total_metalation");
    total_cell.innerHTML = (results['total'] * 100).toFixed(2).toString() + '%';
}
// Quick and simple export target #table_id into a csv
function downloadTableAsCsv(table_id, separator) {
    if (separator === void 0) { separator = ','; }
    // Select rows from table_id
    var rows = document.querySelectorAll('table#' + table_id + ' tr');
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [], cols = rows[i].querySelectorAll('td, th');
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data;
            var inputs = cols[j].getElementsByTagName('input');
            if (inputs.length > 0) {
                data = inputs[0].value;
            }
            else {
                data = cols[j].innerText;
            }
            // Remove line breaks and escape double-quote with double-double-quote
            data = data.replace(/(\r\n|\n|\r)/gm, '').replace(/(\s\s)/gm, ' ');
            data = data.replace(/"/g, '""');
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csv_string = csv.join('\n');
    // Download it
    var filename = 'export_' + table_id + '_' + new Date().toLocaleDateString() + '.csv';
    var link = document.createElement('a');
    link.style.display = 'none';
    link.setAttribute('target', '_blank');
    link.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv_string));
    link.setAttribute('download', filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
window.addEventListener('DOMContentLoaded', function (event) {
    var metal_table = document.getElementById('metalation_table');
    for (var id in metals.all_metals) {
        var m = metals.all_metals[id];
        appendMetalTableRow(m, metal_table);
    }
    document.getElementById('calculate_btn').onclick = function () {
        calculate();
        document.getElementById('download_btn').disabled = false;
    };
    document.getElementById('download_btn').onclick = function () {
        downloadTableAsCsv('metalation_table');
    };
});

},{"./metals":2}],2:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateOccupancy = exports.all_metals = exports.Metal = void 0;
var Metal = /** @class */ (function () {
    function Metal(name, symbol, affinity, concentration) {
        this.name = name;
        this.symbol = symbol;
        this.affinity = affinity;
        this.metalation_delta_G = this.calculateDeltaG(affinity);
        this.buffered_metal_concentration = concentration;
        this.intracellular_available_delta_G = this.calculateDeltaG(concentration);
        this.id_suffix = symbol.toLowerCase();
    }
    Metal.prototype.calculateDeltaG = function (mole_value) {
        return 8.314 * 298.15 * Math.log(mole_value) / 1000;
    };
    return Metal;
}());
exports.Metal = Metal;
var metal_vals = [
    ["Magnesium", "Mg", 1E3, 2.7E-3],
    ["Manganese", "Mn", 1E3, 2.6E-6],
    ["Iron", "Fe", 1E-6, 4.8E-8],
    ["Cobalt", "Co", 3E-11, 2.5E-9],
    ["Nickel", "Ni", 9.8E-10, 1.8E-13],
    ["Copper", "Cu", 2.4E-16, 1.2E-18],
    ["Zinc", "Zn", 1.9E-13, 1.19E-12],
];
exports.all_metals = {};
for (var _i = 0, metal_vals_1 = metal_vals; _i < metal_vals_1.length; _i++) {
    var m = metal_vals_1[_i];
    exports.all_metals[m[1].toLowerCase()] = new (Metal.bind.apply(Metal, __spreadArray([void 0], m, false)))();
}
function calculateOccupancy() {
    var exp_scaled_differences = {};
    var total_diffs = 0;
    for (var id in exports.all_metals) {
        var m_1 = exports.all_metals[id];
        exp_scaled_differences[id] = Math.exp(1000 * (m_1.intracellular_available_delta_G - m_1.metalation_delta_G)
            / (8.314 * 298.15));
        total_diffs += exp_scaled_differences[id];
    }
    var occupancies = {};
    var total_occupancy = 0;
    for (var id in exports.all_metals) {
        occupancies[id] = exp_scaled_differences[id] / (1 + total_diffs);
        total_occupancy += occupancies[id];
    }
    occupancies['total'] = total_occupancy;
    return occupancies;
}
exports.calculateOccupancy = calculateOccupancy;

},{}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

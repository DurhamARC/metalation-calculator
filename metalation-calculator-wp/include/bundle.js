(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var metals = require("./metals");
var metalDataSet = new metals.MetalDataSet();
function createMetalNumberInput(prefix, metal, metalPropertyName, additionalOnChange) {
    var div = document.createElement("div");
    var input = document.createElement("input");
    var msgP = document.createElement("p");
    msgP.classList.add("error-msg");
    input.value = metal.getProperty(metalPropertyName).toString();
    input.classList.add(prefix);
    input.id = prefix + "_" + metal.idSuffix;
    input.type = "number";
    input.addEventListener("change", function (event) {
        var _a;
        var val = event.target.value;
        try {
            msgP.textContent = "";
            var floatVal = parseFloat(val);
            var m = metalDataSet.metals[metal.idSuffix];
            Object.assign(m, (_a = {}, _a[metalPropertyName] = floatVal, _a));
            if (additionalOnChange)
                additionalOnChange(metal.idSuffix);
            calculate();
        }
        catch (e) {
            var msg = void 0;
            if (e instanceof RangeError) {
                msg = e.message;
            }
            else {
                msg = "Invalid value " + input.value;
            }
            msgP.textContent = msg;
            clearCalculation();
        }
    });
    div.append(input);
    div.append(msgP);
    return div;
}
function appendMetalTableRow(metal, table) {
    var row = table
        .getElementsByTagName("tbody")[0]
        .insertRow();
    var toggleButton = document.createElement("input");
    var label = document.createElement("label");
    toggleButton.type = "checkbox";
    toggleButton.classList.add("toggle");
    toggleButton.id = "toggle_" + metal.idSuffix;
    label.htmlFor = "toggle_" + metal.idSuffix;
    var metalCell = document.createElement("th");
    toggleButton.addEventListener("change", function () {
        toggleMetal(this.checked, metal);
        calculate();
    });
    metalCell.appendChild(toggleButton);
    metalCell.appendChild(label);
    var metalID = document.createElement("span");
    metalID.innerHTML = metal.symbol;
    metalID.classList.add("metal-symbol");
    metalCell.appendChild(metalID);
    row.appendChild(metalCell);
    var affinityCell = row.insertCell(-1);
    affinityCell.classList.add("affinity", "grouped");
    var affinityInput = createMetalNumberInput("affinity", metal, "affinity", function (id) {
        var m = metalDataSet.metals[id];
        (document.getElementById("metalation_delta_g_" + id)).innerText = m.metalationDeltaG.toFixed(1).toString();
    });
    affinityCell.appendChild(affinityInput);
    var mDeltaGCell = row.insertCell(-1);
    mDeltaGCell.classList.add("grouped", "right-spacing");
    mDeltaGCell.id = "metalation_delta_g_" + metal.idSuffix;
    mDeltaGCell.innerText = metal.metalationDeltaG.toFixed(1).toString();
    var bmcCell = row.insertCell(-1);
    bmcCell.classList.add("bmc", "grouped");
    var bmcInput = createMetalNumberInput("bmc", metal, "bufferedMetalConcentration", function (id) {
        var m = metalDataSet.metals[id];
        (document.getElementById("ia_delta_g_" + id)).innerText = m.intracellularAvailableDeltaG.toFixed(1).toString();
    });
    bmcCell.appendChild(bmcInput);
    var iaDeltaGCell = row.insertCell(-1);
    iaDeltaGCell.classList.add("grouped");
    iaDeltaGCell.id = "ia_delta_g_" + metal.idSuffix;
    iaDeltaGCell.innerText = metal.intracellularAvailableDeltaG
        .toFixed(1)
        .toString();
    var resultCell = row.insertCell(-1);
    resultCell.classList.add("result");
    resultCell.id = "result_" + metal.idSuffix;
}
function toggleMetal(willTurnOff, metal) {
    document.getElementById("affinity_" + metal.idSuffix).disabled = willTurnOff;
    document.getElementById("bmc_" + metal.idSuffix).disabled = willTurnOff;
    if (willTurnOff) {
        metal.switchOffMetal();
    }
    else {
        metal.resetValues();
    }
    updateRow(metal);
}
function updateRow(metal) {
    var id = metal.idSuffix;
    document.getElementById("affinity_" + id).value =
        metal.affinity.toString();
    document.getElementById("metalation_delta_g_" + id).innerText =
        metal.metalationDeltaG.toFixed(1).toString();
    document.getElementById("bmc_" + id).value =
        metal.bufferedMetalConcentration.toString();
    document.getElementById("ia_delta_g_" + id).innerText =
        metal.intracellularAvailableDeltaG.toFixed(1).toString();
}
function calculate() {
    var results = metalDataSet.calculateOccupancy();
    for (var id in metalDataSet.metals) {
        var r = results[id];
        var resultCell = (document.getElementById("result_" + id));
        resultCell.innerHTML = (r * 100).toFixed(2).toString() + "%";
    }
    var totalCell = (document.getElementById("total-metalation"));
    totalCell.innerHTML = (results["total"] * 100).toFixed(2).toString() + "%";
    document.getElementById("download-btn").disabled = false;
}
function clearCalculation() {
    Array.from(document.getElementsByClassName("result")).forEach(function (cell) {
        cell.innerHTML = "N/A";
    });
    document.getElementById("download-btn").disabled = true;
}
function reset() {
    for (var id in metalDataSet.metals) {
        var m = metalDataSet.metals[id];
        document.getElementById("toggle_" + m.idSuffix).checked = false;
        m.resetValues();
        toggleMetal(false, m);
    }
    calculate();
}
function cleanData(data) {
    data = data.replace(/(\r\n|\n|\r)/gm, "").replace(/(\s\s)/gm, " ");
    data = data.replace(/"/g, '""');
    data = data.replace(/\u2206/g, "Delta ");
    return data;
}
// Quick and simple export target #tableId into a csv
function downloadTableAsCsv(tableId, separator) {
    if (separator === void 0) { separator = ","; }
    // Select rows from tableId
    var rows = document.querySelectorAll("table#" + tableId + " tr");
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [];
        var cols = (rows[i].querySelectorAll("td, th"));
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = void 0;
            var inputs = cols[j].getElementsByTagName("input");
            if (inputs.length > 0) {
                data = inputs[0].value;
            }
            else {
                data = cols[j].innerText;
            }
            // Remove line breaks and escape double-quote with double-double-quote
            data = cleanData(data);
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csvString = csv.join("\n");
    // Download it
    var filename = "export_" + tableId + "_" + new Date().toLocaleDateString() + ".csv";
    var link = document.createElement("a");
    link.style.display = "none";
    link.setAttribute("target", "_blank");
    link.setAttribute("href", "data:text/csv;charset=utf-8," + encodeURIComponent(csvString));
    link.setAttribute("download", filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
window.addEventListener("DOMContentLoaded", function () {
    var metalTable = (document.getElementById("metalation-table"));
    for (var id in metalDataSet.metals) {
        var m = metalDataSet.metals[id];
        appendMetalTableRow(m, metalTable);
    }
    document.getElementById("download-btn").onclick = function () {
        downloadTableAsCsv("metalation-table");
    };
    document.getElementById("reset-btn").onclick = function () {
        reset();
    };
    calculate();
});

},{"./metals":2}],2:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetalDataSet = exports.Metal = void 0;
/**
 * An object to store values for a single metal and calculate delta G values
 */
var Metal = /** @class */ (function () {
    function Metal(name, symbol, affinity, concentration) {
        this.name = name;
        this.symbol = symbol;
        this.affinity = affinity;
        this.bufferedMetalConcentration = concentration;
        this.idSuffix = symbol.toLowerCase();
        this._defaultAffinity = affinity;
        this._defaultMetalConcentration = concentration;
    }
    Metal.prototype.calculateDeltaG = function (moleValue) {
        return (8.314 * 298.15 * Math.log(moleValue)) / 1000;
    };
    Metal.prototype.checkRange = function (val, fieldName) {
        if (isNaN(val))
            throw new RangeError(fieldName + " must be set");
        if (val < 1e-30 || val > 1000) {
            throw new RangeError(fieldName + " must be between 1e-30 and 1000");
        }
    };
    Object.defineProperty(Metal.prototype, "affinity", {
        get: function () {
            return this._affinity;
        },
        set: function (val) {
            this.checkRange(val, "Affinity");
            this._affinity = val;
            this._metalationDeltaG = this.calculateDeltaG(this._affinity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "metalationDeltaG", {
        get: function () {
            return this._metalationDeltaG;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "bufferedMetalConcentration", {
        get: function () {
            return this._bufferedMetalConcentration;
        },
        set: function (val) {
            this.checkRange(val, "Buffered metal concentration");
            this._bufferedMetalConcentration = val;
            this._intracellularAvailableDeltaG = this.calculateDeltaG(this._bufferedMetalConcentration);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "intracellularAvailableDeltaG", {
        get: function () {
            return this._intracellularAvailableDeltaG;
        },
        set: function (val) {
            if (val <= 0)
                throw new RangeError("Intracellular available ∆G must be > 0");
            this._intracellularAvailableDeltaG = val;
        },
        enumerable: false,
        configurable: true
    });
    Metal.prototype.getProperty = function (key) {
        return this[key];
    };
    Metal.prototype.switchOffMetal = function () {
        this.affinity = 1000;
        this.bufferedMetalConcentration = this._defaultMetalConcentration;
    };
    Metal.prototype.resetValues = function () {
        this.affinity = this._defaultAffinity;
        this.bufferedMetalConcentration = this._defaultMetalConcentration;
    };
    return Metal;
}());
exports.Metal = Metal;
var METAL_VALS = [
    ["Magnesium", "Mg", 1e3, 2.7e-3],
    ["Manganese", "Mn", 1e3, 2.6e-6],
    ["Iron", "Fe", 1e-6, 4.8e-8],
    ["Cobalt", "Co", 3e-11, 2.5e-9],
    ["Nickel", "Ni", 9.8e-10, 1.8e-13],
    ["Copper", "Cu", 2.4e-16, 1.2e-18],
    ["Zinc", "Zn", 1.9e-13, 1.19e-12],
];
var MetalDataSet = /** @class */ (function () {
    function MetalDataSet() {
        this.metals = {};
        for (var _i = 0, METAL_VALS_1 = METAL_VALS; _i < METAL_VALS_1.length; _i++) {
            var m = METAL_VALS_1[_i];
            this.metals[m[1].toLowerCase()] = new (Metal.bind.apply(Metal, __spreadArray([void 0], m, false)))();
        }
    }
    MetalDataSet.prototype.calculateOccupancy = function () {
        var expScaledDifferences = {};
        var totalDiffs = 0;
        for (var id in this.metals) {
            var m = this.metals[id];
            expScaledDifferences[id] = Math.exp((1000 * (m.intracellularAvailableDeltaG - m.metalationDeltaG)) /
                (8.314 * 298.15));
            totalDiffs += expScaledDifferences[id];
        }
        var occupancies = {};
        var totalOccupancy = 0;
        for (var id in this.metals) {
            occupancies[id] = expScaledDifferences[id] / (1 + totalDiffs);
            totalOccupancy += occupancies[id];
        }
        occupancies["total"] = totalOccupancy;
        return occupancies;
    };
    return MetalDataSet;
}());
exports.MetalDataSet = MetalDataSet;

},{}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi50cyIsInNyYy9tZXRhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLGlDQUFtQztBQUVuQyxJQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUUvQyxTQUFTLHNCQUFzQixDQUM3QixNQUFjLEVBQ2QsS0FBbUIsRUFDbkIsaUJBQXFDLEVBQ3JDLGtCQUF3QztJQUV4QyxJQUFNLEdBQUcsR0FBbUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxRCxJQUFNLEtBQUssR0FBcUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoRSxJQUFNLElBQUksR0FBeUIsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvRCxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM5RCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixLQUFLLENBQUMsRUFBRSxHQUFHLE1BQU0sR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUN6QyxLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztJQUN0QixLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQVUsS0FBSzs7UUFDOUMsSUFBTSxHQUFHLEdBQXNCLEtBQUssQ0FBQyxNQUFPLENBQUMsS0FBSyxDQUFDO1FBQ25ELElBQUk7WUFDRixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUN0QixJQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7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IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJpbXBvcnQgKiBhcyBtZXRhbHMgZnJvbSBcIi4vbWV0YWxzXCI7XG5cbmNvbnN0IG1ldGFsRGF0YVNldCA9IG5ldyBtZXRhbHMuTWV0YWxEYXRhU2V0KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1ldGFsTnVtYmVySW5wdXQoXG4gIHByZWZpeDogc3RyaW5nLFxuICBtZXRhbDogbWV0YWxzLk1ldGFsLFxuICBtZXRhbFByb3BlcnR5TmFtZToga2V5b2YgbWV0YWxzLk1ldGFsLFxuICBhZGRpdGlvbmFsT25DaGFuZ2U6IChpZDogc3RyaW5nKSA9PiB2b2lkXG4pIHtcbiAgY29uc3QgZGl2ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGlucHV0ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBjb25zdCBtc2dQID0gPEhUTUxQYXJhZ3JhcGhFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBtc2dQLmNsYXNzTGlzdC5hZGQoXCJlcnJvci1tc2dcIik7XG4gIGlucHV0LnZhbHVlID0gbWV0YWwuZ2V0UHJvcGVydHkobWV0YWxQcm9wZXJ0eU5hbWUpLnRvU3RyaW5nKCk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQocHJlZml4KTtcbiAgaW5wdXQuaWQgPSBwcmVmaXggKyBcIl9cIiArIG1ldGFsLmlkU3VmZml4O1xuICBpbnB1dC50eXBlID0gXCJudW1iZXJcIjtcbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCB2YWwgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZTtcbiAgICB0cnkge1xuICAgICAgbXNnUC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICBjb25zdCBmbG9hdFZhbCA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW21ldGFsLmlkU3VmZml4XTtcbiAgICAgIE9iamVjdC5hc3NpZ24obSwgeyBbbWV0YWxQcm9wZXJ0eU5hbWVdOiBmbG9hdFZhbCB9KTtcbiAgICAgIGlmIChhZGRpdGlvbmFsT25DaGFuZ2UpIGFkZGl0aW9uYWxPbkNoYW5nZShtZXRhbC5pZFN1ZmZpeCk7XG4gICAgICBjYWxjdWxhdGUoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsZXQgbXNnO1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgIG1zZyA9IGUubWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1zZyA9IFwiSW52YWxpZCB2YWx1ZSBcIiArIGlucHV0LnZhbHVlO1xuICAgICAgfVxuICAgICAgbXNnUC50ZXh0Q29udGVudCA9IG1zZztcbiAgICAgIGNsZWFyQ2FsY3VsYXRpb24oKTtcbiAgICB9XG4gIH0pO1xuICBkaXYuYXBwZW5kKGlucHV0KTtcbiAgZGl2LmFwcGVuZChtc2dQKTtcbiAgcmV0dXJuIGRpdjtcbn1cbmZ1bmN0aW9uIGFwcGVuZE1ldGFsVGFibGVSb3cobWV0YWw6IG1ldGFscy5NZXRhbCwgdGFibGU6IEhUTUxUYWJsZUVsZW1lbnQpIHtcbiAgY29uc3Qgcm93OiBIVE1MVGFibGVSb3dFbGVtZW50ID0gdGFibGVcbiAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXVxuICAgIC5pbnNlcnRSb3coKTtcblxuICBjb25zdCB0b2dnbGVCdXR0b24gPSA8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gIGNvbnN0IGxhYmVsID0gPEhUTUxMYWJlbEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICB0b2dnbGVCdXR0b24udHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgdG9nZ2xlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJ0b2dnbGVcIik7XG4gIHRvZ2dsZUJ1dHRvbi5pZCA9IFwidG9nZ2xlX1wiICsgbWV0YWwuaWRTdWZmaXg7XG4gIGxhYmVsLmh0bWxGb3IgPSBcInRvZ2dsZV9cIiArIG1ldGFsLmlkU3VmZml4O1xuICBjb25zdCBtZXRhbENlbGwgPSA8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xuXG4gIHRvZ2dsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICB0b2dnbGVNZXRhbCh0aGlzLmNoZWNrZWQsIG1ldGFsKTtcbiAgICBjYWxjdWxhdGUoKTtcbiAgfSk7XG5cbiAgbWV0YWxDZWxsLmFwcGVuZENoaWxkKHRvZ2dsZUJ1dHRvbik7XG4gIG1ldGFsQ2VsbC5hcHBlbmRDaGlsZChsYWJlbCk7XG4gIGNvbnN0IG1ldGFsSUQgPSA8SFRNTFNwYW5FbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICBtZXRhbElELmlubmVySFRNTCA9IG1ldGFsLnN5bWJvbDtcbiAgbWV0YWxJRC5jbGFzc0xpc3QuYWRkKFwibWV0YWwtc3ltYm9sXCIpO1xuICBtZXRhbENlbGwuYXBwZW5kQ2hpbGQobWV0YWxJRCk7XG4gIHJvdy5hcHBlbmRDaGlsZChtZXRhbENlbGwpO1xuXG4gIGNvbnN0IGFmZmluaXR5Q2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQgPSByb3cuaW5zZXJ0Q2VsbCgtMSk7XG4gIGFmZmluaXR5Q2VsbC5jbGFzc0xpc3QuYWRkKFwiYWZmaW5pdHlcIiwgXCJncm91cGVkXCIpO1xuICBjb25zdCBhZmZpbml0eUlucHV0ID0gY3JlYXRlTWV0YWxOdW1iZXJJbnB1dChcbiAgICBcImFmZmluaXR5XCIsXG4gICAgbWV0YWwsXG4gICAgXCJhZmZpbml0eVwiLFxuICAgIGZ1bmN0aW9uIChpZCkge1xuICAgICAgY29uc3QgbSA9IG1ldGFsRGF0YVNldC5tZXRhbHNbaWRdO1xuICAgICAgKDxIVE1MVGFibGVDZWxsRWxlbWVudD4oXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWV0YWxhdGlvbl9kZWx0YV9nX1wiICsgaWQpXG4gICAgICApKS5pbm5lclRleHQgPSBtLm1ldGFsYXRpb25EZWx0YUcudG9GaXhlZCgxKS50b1N0cmluZygpO1xuICAgIH1cbiAgKTtcbiAgYWZmaW5pdHlDZWxsLmFwcGVuZENoaWxkKGFmZmluaXR5SW5wdXQpO1xuXG4gIGNvbnN0IG1EZWx0YUdDZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgbURlbHRhR0NlbGwuY2xhc3NMaXN0LmFkZChcImdyb3VwZWRcIiwgXCJyaWdodC1zcGFjaW5nXCIpO1xuICBtRGVsdGFHQ2VsbC5pZCA9IFwibWV0YWxhdGlvbl9kZWx0YV9nX1wiICsgbWV0YWwuaWRTdWZmaXg7XG4gIG1EZWx0YUdDZWxsLmlubmVyVGV4dCA9IG1ldGFsLm1ldGFsYXRpb25EZWx0YUcudG9GaXhlZCgxKS50b1N0cmluZygpO1xuXG4gIGNvbnN0IGJtY0NlbGw6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gcm93Lmluc2VydENlbGwoLTEpO1xuICBibWNDZWxsLmNsYXNzTGlzdC5hZGQoXCJibWNcIiwgXCJncm91cGVkXCIpO1xuICBjb25zdCBibWNJbnB1dCA9IGNyZWF0ZU1ldGFsTnVtYmVySW5wdXQoXG4gICAgXCJibWNcIixcbiAgICBtZXRhbCxcbiAgICBcImJ1ZmZlcmVkTWV0YWxDb25jZW50cmF0aW9uXCIsXG4gICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICBjb25zdCBtID0gbWV0YWxEYXRhU2V0Lm1ldGFsc1tpZF07XG4gICAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+KFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImlhX2RlbHRhX2dfXCIgKyBpZClcbiAgICAgICkpLmlubmVyVGV4dCA9IG0uaW50cmFjZWxsdWxhckF2YWlsYWJsZURlbHRhRy50b0ZpeGVkKDEpLnRvU3RyaW5nKCk7XG4gICAgfVxuICApO1xuXG4gIGJtY0NlbGwuYXBwZW5kQ2hpbGQoYm1jSW5wdXQpO1xuXG4gIGNvbnN0IGlhRGVsdGFHQ2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQgPSByb3cuaW5zZXJ0Q2VsbCgtMSk7XG4gIGlhRGVsdGFHQ2VsbC5jbGFzc0xpc3QuYWRkKFwiZ3JvdXBlZFwiKTtcbiAgaWFEZWx0YUdDZWxsLmlkID0gXCJpYV9kZWx0YV9nX1wiICsgbWV0YWwuaWRTdWZmaXg7XG4gIGlhRGVsdGFHQ2VsbC5pbm5lclRleHQgPSBtZXRhbC5pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHXG4gICAgLnRvRml4ZWQoMSlcbiAgICAudG9TdHJpbmcoKTtcblxuICBjb25zdCByZXN1bHRDZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgcmVzdWx0Q2VsbC5jbGFzc0xpc3QuYWRkKFwicmVzdWx0XCIpO1xuICByZXN1bHRDZWxsLmlkID0gXCJyZXN1bHRfXCIgKyBtZXRhbC5pZFN1ZmZpeDtcbn1cbmZ1bmN0aW9uIHRvZ2dsZU1ldGFsKHdpbGxUdXJuT2ZmOiBib29sZWFuLCBtZXRhbDogbWV0YWxzLk1ldGFsKSB7XG4gIChcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFmZmluaXR5X1wiICsgbWV0YWwuaWRTdWZmaXgpIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgKS5kaXNhYmxlZCA9IHdpbGxUdXJuT2ZmO1xuICAoXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJibWNfXCIgKyBtZXRhbC5pZFN1ZmZpeCkgYXMgSFRNTElucHV0RWxlbWVudFxuICApLmRpc2FibGVkID0gd2lsbFR1cm5PZmY7XG4gIGlmICh3aWxsVHVybk9mZikge1xuICAgIG1ldGFsLnN3aXRjaE9mZk1ldGFsKCk7XG4gIH0gZWxzZSB7XG4gICAgbWV0YWwucmVzZXRWYWx1ZXMoKTtcbiAgfVxuICB1cGRhdGVSb3cobWV0YWwpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVSb3cobWV0YWw6IG1ldGFscy5NZXRhbCkge1xuICBjb25zdCBpZCA9IG1ldGFsLmlkU3VmZml4O1xuICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZmZpbml0eV9cIiArIGlkKSkudmFsdWUgPVxuICAgIG1ldGFsLmFmZmluaXR5LnRvU3RyaW5nKCk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWV0YWxhdGlvbl9kZWx0YV9nX1wiICsgaWQpLmlubmVyVGV4dCA9XG4gICAgbWV0YWwubWV0YWxhdGlvbkRlbHRhRy50b0ZpeGVkKDEpLnRvU3RyaW5nKCk7XG4gICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJtY19cIiArIGlkKSkudmFsdWUgPVxuICAgIG1ldGFsLmJ1ZmZlcmVkTWV0YWxDb25jZW50cmF0aW9uLnRvU3RyaW5nKCk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWFfZGVsdGFfZ19cIiArIGlkKS5pbm5lclRleHQgPVxuICAgIG1ldGFsLmludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUcudG9GaXhlZCgxKS50b1N0cmluZygpO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGUoKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBtZXRhbERhdGFTZXQuY2FsY3VsYXRlT2NjdXBhbmN5KCk7XG5cbiAgZm9yIChjb25zdCBpZCBpbiBtZXRhbERhdGFTZXQubWV0YWxzKSB7XG4gICAgY29uc3QgciA9IHJlc3VsdHNbaWRdO1xuICAgIGNvbnN0IHJlc3VsdENlbGwgPSA8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRfXCIgKyBpZClcbiAgICApO1xuICAgIHJlc3VsdENlbGwuaW5uZXJIVE1MID0gKHIgKiAxMDApLnRvRml4ZWQoMikudG9TdHJpbmcoKSArIFwiJVwiO1xuICB9XG5cbiAgY29uc3QgdG90YWxDZWxsID0gPEhUTUxUYWJsZUNlbGxFbGVtZW50PihcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGFsLW1ldGFsYXRpb25cIilcbiAgKTtcbiAgdG90YWxDZWxsLmlubmVySFRNTCA9IChyZXN1bHRzW1widG90YWxcIl0gKiAxMDApLnRvRml4ZWQoMikudG9TdHJpbmcoKSArIFwiJVwiO1xuXG4gICg8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIikpLmRpc2FibGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ2FsY3VsYXRpb24oKSB7XG4gIEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJlc3VsdFwiKSkuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgIGNlbGwuaW5uZXJIVE1MID0gXCJOL0FcIjtcbiAgfSk7XG4gICg8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIikpLmRpc2FibGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gIGZvciAoY29uc3QgaWQgaW4gbWV0YWxEYXRhU2V0Lm1ldGFscykge1xuICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW2lkXTtcbiAgICAoXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZV9cIiArIG0uaWRTdWZmaXgpIGFzIEhUTUxJbnB1dEVsZW1lbnRcbiAgICApLmNoZWNrZWQgPSBmYWxzZTtcbiAgICBtLnJlc2V0VmFsdWVzKCk7XG4gICAgdG9nZ2xlTWV0YWwoZmFsc2UsIG0pO1xuICB9XG4gIGNhbGN1bGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBjbGVhbkRhdGEoZGF0YTogc3RyaW5nKSB7XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoLyhcXHJcXG58XFxufFxccikvZ20sIFwiXCIpLnJlcGxhY2UoLyhcXHNcXHMpL2dtLCBcIiBcIik7XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1wiL2csICdcIlwiJyk7XG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1xcdTIyMDYvZywgXCJEZWx0YSBcIik7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vLyBRdWljayBhbmQgc2ltcGxlIGV4cG9ydCB0YXJnZXQgI3RhYmxlSWQgaW50byBhIGNzdlxuZnVuY3Rpb24gZG93bmxvYWRUYWJsZUFzQ3N2KHRhYmxlSWQ6IHN0cmluZywgc2VwYXJhdG9yID0gXCIsXCIpIHtcbiAgLy8gU2VsZWN0IHJvd3MgZnJvbSB0YWJsZUlkXG4gIGNvbnN0IHJvd3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidGFibGUjXCIgKyB0YWJsZUlkICsgXCIgdHJcIik7XG4gIC8vIENvbnN0cnVjdCBjc3ZcbiAgY29uc3QgY3N2ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IFtdO1xuICAgIGNvbnN0IGNvbHMgPSA8Tm9kZUxpc3RPZjxIVE1MVGFibGVDZWxsRWxlbWVudD4+KFxuICAgICAgcm93c1tpXS5xdWVyeVNlbGVjdG9yQWxsKFwidGQsIHRoXCIpXG4gICAgKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIC8vIENsZWFuIGlubmVydGV4dCB0byByZW1vdmUgbXVsdGlwbGUgc3BhY2VzIGFuZCBqdW1wbGluZSAoYnJlYWsgY3N2KVxuICAgICAgbGV0IGRhdGE7XG4gICAgICBjb25zdCBpbnB1dHMgPSBjb2xzW2pdLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIik7XG4gICAgICBpZiAoaW5wdXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgZGF0YSA9IGlucHV0c1swXS52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBjb2xzW2pdLmlubmVyVGV4dDtcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBsaW5lIGJyZWFrcyBhbmQgZXNjYXBlIGRvdWJsZS1xdW90ZSB3aXRoIGRvdWJsZS1kb3VibGUtcXVvdGVcbiAgICAgIGRhdGEgPSBjbGVhbkRhdGEoZGF0YSk7XG4gICAgICAvLyBQdXNoIGVzY2FwZWQgc3RyaW5nXG4gICAgICByb3cucHVzaCgnXCInICsgZGF0YSArICdcIicpO1xuICAgIH1cbiAgICBjc3YucHVzaChyb3cuam9pbihzZXBhcmF0b3IpKTtcbiAgfVxuICBjb25zdCBjc3ZTdHJpbmcgPSBjc3Yuam9pbihcIlxcblwiKTtcbiAgLy8gRG93bmxvYWQgaXRcbiAgY29uc3QgZmlsZW5hbWUgPVxuICAgIFwiZXhwb3J0X1wiICsgdGFibGVJZCArIFwiX1wiICsgbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKSArIFwiLmNzdlwiO1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIGxpbmsuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBsaW5rLnNldEF0dHJpYnV0ZShcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcbiAgbGluay5zZXRBdHRyaWJ1dGUoXG4gICAgXCJocmVmXCIsXG4gICAgXCJkYXRhOnRleHQvY3N2O2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY3N2U3RyaW5nKVxuICApO1xuICBsaW5rLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsIGZpbGVuYW1lKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgbGluay5jbGljaygpO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICBjb25zdCBtZXRhbFRhYmxlID0gPEhUTUxUYWJsZUVsZW1lbnQ+KFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWV0YWxhdGlvbi10YWJsZVwiKVxuICApO1xuICBmb3IgKGNvbnN0IGlkIGluIG1ldGFsRGF0YVNldC5tZXRhbHMpIHtcbiAgICBjb25zdCBtID0gbWV0YWxEYXRhU2V0Lm1ldGFsc1tpZF07XG4gICAgYXBwZW5kTWV0YWxUYWJsZVJvdyhtLCBtZXRhbFRhYmxlKTtcbiAgfVxuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZG93bmxvYWQtYnRuXCIpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgZG93bmxvYWRUYWJsZUFzQ3N2KFwibWV0YWxhdGlvbi10YWJsZVwiKTtcbiAgfTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc2V0LWJ0blwiKS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0KCk7XG4gIH07XG5cbiAgY2FsY3VsYXRlKCk7XG59KTtcbiIsIi8qKlxuICogQW4gb2JqZWN0IHRvIHN0b3JlIHZhbHVlcyBmb3IgYSBzaW5nbGUgbWV0YWwgYW5kIGNhbGN1bGF0ZSBkZWx0YSBHIHZhbHVlc1xuICovXG5leHBvcnQgY2xhc3MgTWV0YWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nO1xuICBfYWZmaW5pdHk6IG51bWJlcjtcbiAgX2RlZmF1bHRBZmZpbml0eTogbnVtYmVyO1xuICBfbWV0YWxhdGlvbkRlbHRhRzogbnVtYmVyO1xuICBfYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb246IG51bWJlcjtcbiAgX2RlZmF1bHRNZXRhbENvbmNlbnRyYXRpb246IG51bWJlcjtcbiAgX2ludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUc6IG51bWJlcjtcbiAgaWRTdWZmaXg6IHN0cmluZztcbiAgdmFsaWRhdG9yOiB0eXBlb2YgUHJveHk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIGFmZmluaXR5OiBudW1iZXIsXG4gICAgY29uY2VudHJhdGlvbjogbnVtYmVyXG4gICkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XG4gICAgdGhpcy5hZmZpbml0eSA9IGFmZmluaXR5O1xuICAgIHRoaXMuYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb24gPSBjb25jZW50cmF0aW9uO1xuICAgIHRoaXMuaWRTdWZmaXggPSBzeW1ib2wudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9kZWZhdWx0QWZmaW5pdHkgPSBhZmZpbml0eTtcbiAgICB0aGlzLl9kZWZhdWx0TWV0YWxDb25jZW50cmF0aW9uID0gY29uY2VudHJhdGlvbjtcbiAgfVxuXG4gIGNhbGN1bGF0ZURlbHRhRyhtb2xlVmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICg4LjMxNCAqIDI5OC4xNSAqIE1hdGgubG9nKG1vbGVWYWx1ZSkpIC8gMTAwMDtcbiAgfVxuXG4gIGNoZWNrUmFuZ2UodmFsOiBudW1iZXIsIGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKGlzTmFOKHZhbCkpIHRocm93IG5ldyBSYW5nZUVycm9yKGZpZWxkTmFtZSArIFwiIG11c3QgYmUgc2V0XCIpO1xuICAgIGlmICh2YWwgPCAxZS0zMCB8fCB2YWwgPiAxMDAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihmaWVsZE5hbWUgKyBcIiBtdXN0IGJlIGJldHdlZW4gMWUtMzAgYW5kIDEwMDBcIik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGFmZmluaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FmZmluaXR5O1xuICB9XG5cbiAgc2V0IGFmZmluaXR5KHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5jaGVja1JhbmdlKHZhbCwgXCJBZmZpbml0eVwiKTtcbiAgICB0aGlzLl9hZmZpbml0eSA9IHZhbDtcbiAgICB0aGlzLl9tZXRhbGF0aW9uRGVsdGFHID0gdGhpcy5jYWxjdWxhdGVEZWx0YUcodGhpcy5fYWZmaW5pdHkpO1xuICB9XG5cbiAgZ2V0IG1ldGFsYXRpb25EZWx0YUcoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YWxhdGlvbkRlbHRhRztcbiAgfVxuXG4gIGdldCBidWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbjtcbiAgfVxuXG4gIHNldCBidWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbih2YWw6IG51bWJlcikge1xuICAgIHRoaXMuY2hlY2tSYW5nZSh2YWwsIFwiQnVmZmVyZWQgbWV0YWwgY29uY2VudHJhdGlvblwiKTtcbiAgICB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbiA9IHZhbDtcbiAgICB0aGlzLl9pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHID0gdGhpcy5jYWxjdWxhdGVEZWx0YUcoXG4gICAgICB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvblxuICAgICk7XG4gIH1cblxuICBnZXQgaW50cmFjZWxsdWxhckF2YWlsYWJsZURlbHRhRygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHO1xuICB9XG5cbiAgc2V0IGludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUcodmFsOiBudW1iZXIpIHtcbiAgICBpZiAodmFsIDw9IDApXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludHJhY2VsbHVsYXIgYXZhaWxhYmxlIOKIhkcgbXVzdCBiZSA+IDBcIik7XG4gICAgdGhpcy5faW50cmFjZWxsdWxhckF2YWlsYWJsZURlbHRhRyA9IHZhbDtcbiAgfVxuXG4gIGdldFByb3BlcnR5KGtleToga2V5b2YgTWV0YWwpIHtcbiAgICByZXR1cm4gdGhpc1trZXldO1xuICB9XG5cbiAgc3dpdGNoT2ZmTWV0YWwoKSB7XG4gICAgdGhpcy5hZmZpbml0eSA9IDEwMDA7XG4gICAgdGhpcy5idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbiA9IHRoaXMuX2RlZmF1bHRNZXRhbENvbmNlbnRyYXRpb247XG4gIH1cblxuICByZXNldFZhbHVlcygpIHtcbiAgICB0aGlzLmFmZmluaXR5ID0gdGhpcy5fZGVmYXVsdEFmZmluaXR5O1xuICAgIHRoaXMuYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb24gPSB0aGlzLl9kZWZhdWx0TWV0YWxDb25jZW50cmF0aW9uO1xuICB9XG59XG5cbmNvbnN0IE1FVEFMX1ZBTFM6IEFycmF5PFtzdHJpbmcsIHN0cmluZywgbnVtYmVyLCBudW1iZXJdPiA9IFtcbiAgW1wiTWFnbmVzaXVtXCIsIFwiTWdcIiwgMWUzLCAyLjdlLTNdLFxuICBbXCJNYW5nYW5lc2VcIiwgXCJNblwiLCAxZTMsIDIuNmUtNl0sXG4gIFtcIklyb25cIiwgXCJGZVwiLCAxZS02LCA0LjhlLThdLFxuICBbXCJDb2JhbHRcIiwgXCJDb1wiLCAzZS0xMSwgMi41ZS05XSxcbiAgW1wiTmlja2VsXCIsIFwiTmlcIiwgOS44ZS0xMCwgMS44ZS0xM10sXG4gIFtcIkNvcHBlclwiLCBcIkN1XCIsIDIuNGUtMTYsIDEuMmUtMThdLFxuICBbXCJaaW5jXCIsIFwiWm5cIiwgMS45ZS0xMywgMS4xOWUtMTJdLFxuXTtcblxuZXhwb3J0IGNsYXNzIE1ldGFsRGF0YVNldCB7XG4gIG1ldGFsczogeyBbaWQ6IHN0cmluZ106IE1ldGFsIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tZXRhbHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG0gb2YgTUVUQUxfVkFMUykge1xuICAgICAgdGhpcy5tZXRhbHNbbVsxXS50b0xvd2VyQ2FzZSgpXSA9IG5ldyBNZXRhbCguLi5tKTtcbiAgICB9XG4gIH1cblxuICBjYWxjdWxhdGVPY2N1cGFuY3koKTogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9IHtcbiAgICBjb25zdCBleHBTY2FsZWREaWZmZXJlbmNlczogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XG4gICAgbGV0IHRvdGFsRGlmZnMgPSAwO1xuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5tZXRhbHMpIHtcbiAgICAgIGNvbnN0IG0gPSB0aGlzLm1ldGFsc1tpZF07XG4gICAgICBleHBTY2FsZWREaWZmZXJlbmNlc1tpZF0gPSBNYXRoLmV4cChcbiAgICAgICAgKDEwMDAgKiAobS5pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHIC0gbS5tZXRhbGF0aW9uRGVsdGFHKSkgL1xuICAgICAgICAgICg4LjMxNCAqIDI5OC4xNSlcbiAgICAgICk7XG4gICAgICB0b3RhbERpZmZzICs9IGV4cFNjYWxlZERpZmZlcmVuY2VzW2lkXTtcbiAgICB9XG5cbiAgICBjb25zdCBvY2N1cGFuY2llczogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XG4gICAgbGV0IHRvdGFsT2NjdXBhbmN5ID0gMDtcblxuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5tZXRhbHMpIHtcbiAgICAgIG9jY3VwYW5jaWVzW2lkXSA9IGV4cFNjYWxlZERpZmZlcmVuY2VzW2lkXSAvICgxICsgdG90YWxEaWZmcyk7XG4gICAgICB0b3RhbE9jY3VwYW5jeSArPSBvY2N1cGFuY2llc1tpZF07XG4gICAgfVxuICAgIG9jY3VwYW5jaWVzW1widG90YWxcIl0gPSB0b3RhbE9jY3VwYW5jeTtcblxuICAgIHJldHVybiBvY2N1cGFuY2llcztcbiAgfVxufVxuIl19

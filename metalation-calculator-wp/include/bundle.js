(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupCalculator = void 0;
var metals = require("./metals");
var metalDataSet = new metals.MetalDataSet();
function createMetalNumberInput(prefix, metal, metalPropertyName, additionalOnChange) {
    var div = document.createElement("div");
    var input = document.createElement("input");
    var msgP = document.createElement("p");
    msgP.classList.add("error-msg");
    input.value = metal.getProperty(metalPropertyName).toString();
    input.classList.add(prefix);
    input.id = prefix + "_" + metal.idSuffix;
    input.type = "number";
    input.addEventListener("change", function (event) {
        var _a;
        var val = event.target.value;
        try {
            msgP.textContent = "";
            var floatVal = parseFloat(val);
            var m = metalDataSet.metals[metal.idSuffix];
            Object.assign(m, (_a = {}, _a[metalPropertyName] = floatVal, _a));
            if (additionalOnChange)
                additionalOnChange(metal.idSuffix);
            calculate();
        }
        catch (e) {
            var msg = void 0;
            if (e instanceof RangeError) {
                msg = e.message;
            }
            else {
                msg = "Invalid value " + input.value;
            }
            msgP.textContent = msg;
            clearCalculation();
        }
    });
    div.append(input);
    div.append(msgP);
    return div;
}
function appendMetalTableRow(metal, table) {
    var row = table
        .getElementsByTagName("tbody")[0]
        .insertRow();
    row.insertCell(-1).outerHTML = "<th>" + metal.symbol + "</th>";
    var affinityCell = row.insertCell(-1);
    affinityCell.classList.add("affinity", "grouped");
    var affinityInput = createMetalNumberInput("affinity", metal, "affinity", function (id) {
        var m = metalDataSet.metals[id];
        (document.getElementById("metalation_delta_g_" + id)).innerText = m.metalationDeltaG.toFixed(1).toString();
    });
    affinityCell.appendChild(affinityInput);
    var mDeltaGCell = row.insertCell(-1);
    mDeltaGCell.classList.add("grouped", "right-spacing");
    mDeltaGCell.id = "metalation_delta_g_" + metal.idSuffix;
    mDeltaGCell.innerText = metal.metalationDeltaG.toFixed(1).toString();
    var bmcCell = row.insertCell(-1);
    bmcCell.classList.add("bmc", "grouped");
    var bmcInput = createMetalNumberInput("bmc", metal, "bufferedMetalConcentration", function (id) {
        var m = metalDataSet.metals[id];
        (document.getElementById("ia_delta_g_" + id)).innerText = m.intracellularAvailableDeltaG.toFixed(1).toString();
    });
    bmcCell.appendChild(bmcInput);
    var iaDeltaGCell = row.insertCell(-1);
    iaDeltaGCell.classList.add("grouped");
    iaDeltaGCell.id = "ia_delta_g_" + metal.idSuffix;
    iaDeltaGCell.innerText = metal.intracellularAvailableDeltaG
        .toFixed(1)
        .toString();
    var resultCell = row.insertCell(-1);
    resultCell.classList.add("result");
    resultCell.id = "result_" + metal.idSuffix;
}
function calculate() {
    var results = metalDataSet.calculateOccupancy();
    for (var id in metalDataSet.metals) {
        var r = results[id];
        var resultCell = (document.getElementById("result_" + id));
        resultCell.innerHTML = (r * 100).toFixed(2).toString() + "%";
    }
    var totalCell = (document.getElementById("total-metalation"));
    totalCell.innerHTML = (results["total"] * 100).toFixed(2).toString() + "%";
    document.getElementById("download-btn").disabled = false;
}
function clearCalculation() {
    Array.from(document.getElementsByClassName("result")).forEach(function (cell) {
        cell.innerHTML = "N/A";
    });
    document.getElementById("download-btn").disabled = true;
}
function reset() {
    metalDataSet = new metals.MetalDataSet();
    for (var id in metalDataSet.metals) {
        var m = metalDataSet.metals[id];
        document.getElementById("affinity_" + id).value =
            m.affinity.toString();
        (document.getElementById("metalation_delta_g_" + id)).innerText = m.metalationDeltaG.toFixed(1).toString();
        document.getElementById("bmc_" + id).value =
            m.bufferedMetalConcentration.toString();
        (document.getElementById("ia_delta_g_" + id)).innerText = m.intracellularAvailableDeltaG.toFixed(1).toString();
    }
    calculate();
}
// Quick and simple export target #tableId into a csv
function downloadTableAsCsv(tableId, separator) {
    if (separator === void 0) { separator = ","; }
    // Select rows from tableId
    var rows = document.querySelectorAll("table#" + tableId + " tr");
    // Construct csv
    var csv = [];
    for (var i = 0; i < rows.length; i++) {
        var row = [];
        var cols = (rows[i].querySelectorAll("td, th"));
        for (var j = 0; j < cols.length; j++) {
            // Clean innertext to remove multiple spaces and jumpline (break csv)
            var data = void 0;
            var inputs = cols[j].getElementsByTagName("input");
            if (inputs.length > 0) {
                data = inputs[0].value;
            }
            else {
                data = cols[j].innerText;
            }
            // Remove line breaks and escape double-quote with double-double-quote
            data = data.replace(/(\r\n|\n|\r)/gm, "").replace(/(\s\s)/gm, " ");
            data = data.replace(/"/g, '""');
            data = data.replace(/\u2206/g, "Delta ");
            // Push escaped string
            row.push('"' + data + '"');
        }
        csv.push(row.join(separator));
    }
    var csvString = csv.join("\n");
    // Download it
    var filename = "export_" + tableId + "_" + new Date().toLocaleDateString() + ".csv";
    var link = document.createElement("a");
    link.style.display = "none";
    link.setAttribute("target", "_blank");
    link.setAttribute("href", "data:text/csv;charset=utf-8," + encodeURIComponent(csvString));
    link.setAttribute("download", filename);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
function setupCalculator(tableId) {
    var metalTable = document.getElementById(tableId);
    for (var id in metalDataSet.metals) {
        var m = metalDataSet.metals[id];
        appendMetalTableRow(m, metalTable);
    }
    document.getElementById("download-btn").onclick = function () {
        downloadTableAsCsv("metalation-table");
    };
    document.getElementById("reset-btn").onclick = function () {
        reset();
    };
    calculate();
}
exports.setupCalculator = setupCalculator;
window.addEventListener("DOMContentLoaded", function () {
    setupCalculator("metalation-table");
});

},{"./metals":2}],2:[function(require,module,exports){
"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetalDataSet = exports.Metal = void 0;
/**
 * An object to store values for a single metal and calculate delta G values
 */
var Metal = /** @class */ (function () {
    function Metal(name, symbol, affinity, concentration) {
        this.name = name;
        this.symbol = symbol;
        this.affinity = affinity;
        this.bufferedMetalConcentration = concentration;
        this.idSuffix = symbol.toLowerCase();
    }
    Metal.prototype.calculateDeltaG = function (moleValue) {
        return (8.314 * 298.15 * Math.log(moleValue)) / 1000;
    };
    Metal.prototype.checkRange = function (val, fieldName) {
        if (isNaN(val))
            throw new RangeError(fieldName + " must be set");
        if (val < 1e-30 || val > 1000) {
            throw new RangeError(fieldName + " must be between 1e-30 and 1000");
        }
    };
    Object.defineProperty(Metal.prototype, "affinity", {
        get: function () {
            return this._affinity;
        },
        set: function (val) {
            this.checkRange(val, "Affinity");
            this._affinity = val;
            this._metalationDeltaG = this.calculateDeltaG(this._affinity);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "metalationDeltaG", {
        get: function () {
            return this._metalationDeltaG;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "bufferedMetalConcentration", {
        get: function () {
            return this._bufferedMetalConcentration;
        },
        set: function (val) {
            this.checkRange(val, "Buffered metal concentration");
            this._bufferedMetalConcentration = val;
            this._intracellularAvailableDeltaG = this.calculateDeltaG(this._bufferedMetalConcentration);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Metal.prototype, "intracellularAvailableDeltaG", {
        get: function () {
            return this._intracellularAvailableDeltaG;
        },
        set: function (val) {
            if (val <= 0)
                throw new RangeError("Intracellular available âˆ†G must be > 0");
            this._intracellularAvailableDeltaG = val;
        },
        enumerable: false,
        configurable: true
    });
    Metal.prototype.getProperty = function (key) {
        return this[key];
    };
    return Metal;
}());
exports.Metal = Metal;
var METAL_VALS = [
    ["Magnesium", "Mg", 1e3, 2.7e-3],
    ["Manganese", "Mn", 1e3, 2.6e-6],
    ["Iron", "Fe", 1e-6, 4.8e-8],
    ["Cobalt", "Co", 3e-11, 2.5e-9],
    ["Nickel", "Ni", 9.8e-10, 1.8e-13],
    ["Copper", "Cu", 2.4e-16, 1.2e-18],
    ["Zinc", "Zn", 1.9e-13, 1.19e-12],
];
var MetalDataSet = /** @class */ (function () {
    function MetalDataSet() {
        this.metals = {};
        for (var _i = 0, METAL_VALS_1 = METAL_VALS; _i < METAL_VALS_1.length; _i++) {
            var m = METAL_VALS_1[_i];
            this.metals[m[1].toLowerCase()] = new (Metal.bind.apply(Metal, __spreadArray([void 0], m, false)))();
        }
    }
    MetalDataSet.prototype.calculateOccupancy = function () {
        var expScaledDifferences = {};
        var totalDiffs = 0;
        for (var id in this.metals) {
            var m = this.metals[id];
            expScaledDifferences[id] = Math.exp((1000 * (m.intracellularAvailableDeltaG - m.metalationDeltaG)) /
                (8.314 * 298.15));
            totalDiffs += expScaledDifferences[id];
        }
        var occupancies = {};
        var totalOccupancy = 0;
        for (var id in this.metals) {
            occupancies[id] = expScaledDifferences[id] / (1 + totalDiffs);
            totalOccupancy += occupancies[id];
        }
        occupancies["total"] = totalOccupancy;
        return occupancies;
    };
    return MetalDataSet;
}());
exports.MetalDataSet = MetalDataSet;

},{}]},{},[1,2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi50cyIsInNyYy9tZXRhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUNBQSxpQ0FBbUM7QUFFbkMsSUFBSSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7QUFFN0MsU0FBUyxzQkFBc0IsQ0FDN0IsTUFBYyxFQUNkLEtBQW1CLEVBQ25CLGlCQUFxQyxFQUNyQyxrQkFBd0M7SUFFeEMsSUFBTSxHQUFHLEdBQW1CLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUQsSUFBTSxLQUFLLEdBQXFCLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEUsSUFBTSxJQUFJLEdBQXlCLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDaEMsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDOUQsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUIsS0FBSyxDQUFDLEVBQUUsR0FBRyxNQUFNLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFDekMsS0FBSyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7SUFDdEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFVLEtBQUs7O1FBQzlDLElBQU0sR0FBRyxHQUFzQixLQUFLLENBQUMsTUFBTyxDQUFDLEtBQUssQ0FBQztRQUNuRCxJQUFJO1lBQ0YsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7WUFDdEIsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFD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QUcsVUFBVSxDQUFDLENBQUM7WUFDOUQsY0FBYyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQztRQUNELFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRyxjQUFjLENBQUM7UUFFdEMsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FqQ0EsQUFpQ0MsSUFBQTtBQWpDWSxvQ0FBWSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsImltcG9ydCAqIGFzIG1ldGFscyBmcm9tIFwiLi9tZXRhbHNcIjtcblxubGV0IG1ldGFsRGF0YVNldCA9IG5ldyBtZXRhbHMuTWV0YWxEYXRhU2V0KCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU1ldGFsTnVtYmVySW5wdXQoXG4gIHByZWZpeDogc3RyaW5nLFxuICBtZXRhbDogbWV0YWxzLk1ldGFsLFxuICBtZXRhbFByb3BlcnR5TmFtZToga2V5b2YgbWV0YWxzLk1ldGFsLFxuICBhZGRpdGlvbmFsT25DaGFuZ2U6IChpZDogc3RyaW5nKSA9PiB2b2lkXG4pIHtcbiAgY29uc3QgZGl2ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvbnN0IGlucHV0ID0gPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICBjb25zdCBtc2dQID0gPEhUTUxQYXJhZ3JhcGhFbGVtZW50PmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICBtc2dQLmNsYXNzTGlzdC5hZGQoXCJlcnJvci1tc2dcIik7XG4gIGlucHV0LnZhbHVlID0gbWV0YWwuZ2V0UHJvcGVydHkobWV0YWxQcm9wZXJ0eU5hbWUpLnRvU3RyaW5nKCk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQocHJlZml4KTtcbiAgaW5wdXQuaWQgPSBwcmVmaXggKyBcIl9cIiArIG1ldGFsLmlkU3VmZml4O1xuICBpbnB1dC50eXBlID0gXCJudW1iZXJcIjtcbiAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBjb25zdCB2YWwgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZXZlbnQudGFyZ2V0KS52YWx1ZTtcbiAgICB0cnkge1xuICAgICAgbXNnUC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICBjb25zdCBmbG9hdFZhbCA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW21ldGFsLmlkU3VmZml4XTtcbiAgICAgIE9iamVjdC5hc3NpZ24obSwgeyBbbWV0YWxQcm9wZXJ0eU5hbWVdOiBmbG9hdFZhbCB9KTtcbiAgICAgIGlmIChhZGRpdGlvbmFsT25DaGFuZ2UpIGFkZGl0aW9uYWxPbkNoYW5nZShtZXRhbC5pZFN1ZmZpeCk7XG4gICAgICBjYWxjdWxhdGUoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBsZXQgbXNnO1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gICAgICAgIG1zZyA9IGUubWVzc2FnZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1zZyA9IFwiSW52YWxpZCB2YWx1ZSBcIiArIGlucHV0LnZhbHVlO1xuICAgICAgfVxuICAgICAgbXNnUC50ZXh0Q29udGVudCA9IG1zZztcbiAgICAgIGNsZWFyQ2FsY3VsYXRpb24oKTtcbiAgICB9XG4gIH0pO1xuICBkaXYuYXBwZW5kKGlucHV0KTtcbiAgZGl2LmFwcGVuZChtc2dQKTtcbiAgcmV0dXJuIGRpdjtcbn1cbmZ1bmN0aW9uIGFwcGVuZE1ldGFsVGFibGVSb3cobWV0YWw6IG1ldGFscy5NZXRhbCwgdGFibGU6IEhUTUxUYWJsZUVsZW1lbnQpIHtcbiAgY29uc3Qgcm93OiBIVE1MVGFibGVSb3dFbGVtZW50ID0gdGFibGVcbiAgICAuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXVxuICAgIC5pbnNlcnRSb3coKTtcblxuICByb3cuaW5zZXJ0Q2VsbCgtMSkub3V0ZXJIVE1MID0gXCI8dGg+XCIgKyBtZXRhbC5zeW1ib2wgKyBcIjwvdGg+XCI7XG5cbiAgY29uc3QgYWZmaW5pdHlDZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgYWZmaW5pdHlDZWxsLmNsYXNzTGlzdC5hZGQoXCJhZmZpbml0eVwiLCBcImdyb3VwZWRcIik7XG4gIGNvbnN0IGFmZmluaXR5SW5wdXQgPSBjcmVhdGVNZXRhbE51bWJlcklucHV0KFxuICAgIFwiYWZmaW5pdHlcIixcbiAgICBtZXRhbCxcbiAgICBcImFmZmluaXR5XCIsXG4gICAgZnVuY3Rpb24gKGlkKSB7XG4gICAgICBjb25zdCBtID0gbWV0YWxEYXRhU2V0Lm1ldGFsc1tpZF07XG4gICAgICAoPEhUTUxUYWJsZUNlbGxFbGVtZW50PihcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXRhbGF0aW9uX2RlbHRhX2dfXCIgKyBpZClcbiAgICAgICkpLmlubmVyVGV4dCA9IG0ubWV0YWxhdGlvbkRlbHRhRy50b0ZpeGVkKDEpLnRvU3RyaW5nKCk7XG4gICAgfVxuICApO1xuICBhZmZpbml0eUNlbGwuYXBwZW5kQ2hpbGQoYWZmaW5pdHlJbnB1dCk7XG5cbiAgY29uc3QgbURlbHRhR0NlbGw6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gcm93Lmluc2VydENlbGwoLTEpO1xuICBtRGVsdGFHQ2VsbC5jbGFzc0xpc3QuYWRkKFwiZ3JvdXBlZFwiLCBcInJpZ2h0LXNwYWNpbmdcIik7XG4gIG1EZWx0YUdDZWxsLmlkID0gXCJtZXRhbGF0aW9uX2RlbHRhX2dfXCIgKyBtZXRhbC5pZFN1ZmZpeDtcbiAgbURlbHRhR0NlbGwuaW5uZXJUZXh0ID0gbWV0YWwubWV0YWxhdGlvbkRlbHRhRy50b0ZpeGVkKDEpLnRvU3RyaW5nKCk7XG5cbiAgY29uc3QgYm1jQ2VsbDogSFRNTFRhYmxlQ2VsbEVsZW1lbnQgPSByb3cuaW5zZXJ0Q2VsbCgtMSk7XG4gIGJtY0NlbGwuY2xhc3NMaXN0LmFkZChcImJtY1wiLCBcImdyb3VwZWRcIik7XG4gIGNvbnN0IGJtY0lucHV0ID0gY3JlYXRlTWV0YWxOdW1iZXJJbnB1dChcbiAgICBcImJtY1wiLFxuICAgIG1ldGFsLFxuICAgIFwiYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb25cIixcbiAgICBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW2lkXTtcbiAgICAgICg8SFRNTElucHV0RWxlbWVudD4oXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiaWFfZGVsdGFfZ19cIiArIGlkKVxuICAgICAgKSkuaW5uZXJUZXh0ID0gbS5pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHLnRvRml4ZWQoMSkudG9TdHJpbmcoKTtcbiAgICB9XG4gICk7XG5cbiAgYm1jQ2VsbC5hcHBlbmRDaGlsZChibWNJbnB1dCk7XG5cbiAgY29uc3QgaWFEZWx0YUdDZWxsOiBIVE1MVGFibGVDZWxsRWxlbWVudCA9IHJvdy5pbnNlcnRDZWxsKC0xKTtcbiAgaWFEZWx0YUdDZWxsLmNsYXNzTGlzdC5hZGQoXCJncm91cGVkXCIpO1xuICBpYURlbHRhR0NlbGwuaWQgPSBcImlhX2RlbHRhX2dfXCIgKyBtZXRhbC5pZFN1ZmZpeDtcbiAgaWFEZWx0YUdDZWxsLmlubmVyVGV4dCA9IG1ldGFsLmludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUdcbiAgICAudG9GaXhlZCgxKVxuICAgIC50b1N0cmluZygpO1xuXG4gIGNvbnN0IHJlc3VsdENlbGw6IEhUTUxUYWJsZUNlbGxFbGVtZW50ID0gcm93Lmluc2VydENlbGwoLTEpO1xuICByZXN1bHRDZWxsLmNsYXNzTGlzdC5hZGQoXCJyZXN1bHRcIik7XG4gIHJlc3VsdENlbGwuaWQgPSBcInJlc3VsdF9cIiArIG1ldGFsLmlkU3VmZml4O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGUoKSB7XG4gIGNvbnN0IHJlc3VsdHMgPSBtZXRhbERhdGFTZXQuY2FsY3VsYXRlT2NjdXBhbmN5KCk7XG5cbiAgZm9yIChjb25zdCBpZCBpbiBtZXRhbERhdGFTZXQubWV0YWxzKSB7XG4gICAgY29uc3QgciA9IHJlc3VsdHNbaWRdO1xuICAgIGNvbnN0IHJlc3VsdENlbGwgPSA8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRfXCIgKyBpZClcbiAgICApO1xuICAgIHJlc3VsdENlbGwuaW5uZXJIVE1MID0gKHIgKiAxMDApLnRvRml4ZWQoMikudG9TdHJpbmcoKSArIFwiJVwiO1xuICB9XG5cbiAgY29uc3QgdG90YWxDZWxsID0gPEhUTUxUYWJsZUNlbGxFbGVtZW50PihcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvdGFsLW1ldGFsYXRpb25cIilcbiAgKTtcbiAgdG90YWxDZWxsLmlubmVySFRNTCA9IChyZXN1bHRzW1widG90YWxcIl0gKiAxMDApLnRvRml4ZWQoMikudG9TdHJpbmcoKSArIFwiJVwiO1xuXG4gICg8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIikpLmRpc2FibGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ2FsY3VsYXRpb24oKSB7XG4gIEFycmF5LmZyb20oZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInJlc3VsdFwiKSkuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgIGNlbGwuaW5uZXJIVE1MID0gXCJOL0FcIjtcbiAgfSk7XG4gICg8SFRNTEJ1dHRvbkVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIikpLmRpc2FibGVkID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gIG1ldGFsRGF0YVNldCA9IG5ldyBtZXRhbHMuTWV0YWxEYXRhU2V0KCk7XG4gIGZvciAoY29uc3QgaWQgaW4gbWV0YWxEYXRhU2V0Lm1ldGFscykge1xuICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW2lkXTtcbiAgICAoPEhUTUxJbnB1dEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZmZpbml0eV9cIiArIGlkKSkudmFsdWUgPVxuICAgICAgbS5hZmZpbml0eS50b1N0cmluZygpO1xuICAgICg8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXRhbGF0aW9uX2RlbHRhX2dfXCIgKyBpZClcbiAgICApKS5pbm5lclRleHQgPSBtLm1ldGFsYXRpb25EZWx0YUcudG9GaXhlZCgxKS50b1N0cmluZygpO1xuICAgICg8SFRNTElucHV0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJtY19cIiArIGlkKSkudmFsdWUgPVxuICAgICAgbS5idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbi50b1N0cmluZygpO1xuICAgICg8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+KFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpYV9kZWx0YV9nX1wiICsgaWQpXG4gICAgKSkuaW5uZXJUZXh0ID0gbS5pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHLnRvRml4ZWQoMSkudG9TdHJpbmcoKTtcbiAgfVxuICBjYWxjdWxhdGUoKTtcbn1cblxuLy8gUXVpY2sgYW5kIHNpbXBsZSBleHBvcnQgdGFyZ2V0ICN0YWJsZUlkIGludG8gYSBjc3ZcbmZ1bmN0aW9uIGRvd25sb2FkVGFibGVBc0Nzdih0YWJsZUlkOiBzdHJpbmcsIHNlcGFyYXRvciA9IFwiLFwiKSB7XG4gIC8vIFNlbGVjdCByb3dzIGZyb20gdGFibGVJZFxuICBjb25zdCByb3dzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInRhYmxlI1wiICsgdGFibGVJZCArIFwiIHRyXCIpO1xuICAvLyBDb25zdHJ1Y3QgY3N2XG4gIGNvbnN0IGNzdiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCByb3cgPSBbXTtcbiAgICBjb25zdCBjb2xzID0gPE5vZGVMaXN0T2Y8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+PihcbiAgICAgIHJvd3NbaV0ucXVlcnlTZWxlY3RvckFsbChcInRkLCB0aFwiKVxuICAgICk7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzLmxlbmd0aDsgaisrKSB7XG4gICAgICAvLyBDbGVhbiBpbm5lcnRleHQgdG8gcmVtb3ZlIG11bHRpcGxlIHNwYWNlcyBhbmQganVtcGxpbmUgKGJyZWFrIGNzdilcbiAgICAgIGxldCBkYXRhO1xuICAgICAgY29uc3QgaW5wdXRzID0gY29sc1tqXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpO1xuICAgICAgaWYgKGlucHV0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGRhdGEgPSBpbnB1dHNbMF0udmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gY29sc1tqXS5pbm5lclRleHQ7XG4gICAgICB9XG4gICAgICAvLyBSZW1vdmUgbGluZSBicmVha3MgYW5kIGVzY2FwZSBkb3VibGUtcXVvdGUgd2l0aCBkb3VibGUtZG91YmxlLXF1b3RlXG4gICAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC8oXFxyXFxufFxcbnxcXHIpL2dtLCBcIlwiKS5yZXBsYWNlKC8oXFxzXFxzKS9nbSwgXCIgXCIpO1xuICAgICAgZGF0YSA9IGRhdGEucmVwbGFjZSgvXCIvZywgJ1wiXCInKTtcbiAgICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UoL1xcdTIyMDYvZywgXCJEZWx0YSBcIik7XG4gICAgICAvLyBQdXNoIGVzY2FwZWQgc3RyaW5nXG4gICAgICByb3cucHVzaCgnXCInICsgZGF0YSArICdcIicpO1xuICAgIH1cbiAgICBjc3YucHVzaChyb3cuam9pbihzZXBhcmF0b3IpKTtcbiAgfVxuICBjb25zdCBjc3ZTdHJpbmcgPSBjc3Yuam9pbihcIlxcblwiKTtcbiAgLy8gRG93bmxvYWQgaXRcbiAgY29uc3QgZmlsZW5hbWUgPVxuICAgIFwiZXhwb3J0X1wiICsgdGFibGVJZCArIFwiX1wiICsgbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKSArIFwiLmNzdlwiO1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gIGxpbmsuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBsaW5rLnNldEF0dHJpYnV0ZShcInRhcmdldFwiLCBcIl9ibGFua1wiKTtcbiAgbGluay5zZXRBdHRyaWJ1dGUoXG4gICAgXCJocmVmXCIsXG4gICAgXCJkYXRhOnRleHQvY3N2O2NoYXJzZXQ9dXRmLTgsXCIgKyBlbmNvZGVVUklDb21wb25lbnQoY3N2U3RyaW5nKVxuICApO1xuICBsaW5rLnNldEF0dHJpYnV0ZShcImRvd25sb2FkXCIsIGZpbGVuYW1lKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcbiAgbGluay5jbGljaygpO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBDYWxjdWxhdG9yKHRhYmxlSWQ6IHN0cmluZykge1xuICBjb25zdCBtZXRhbFRhYmxlID0gPEhUTUxUYWJsZUVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFibGVJZCk7XG4gIGZvciAoY29uc3QgaWQgaW4gbWV0YWxEYXRhU2V0Lm1ldGFscykge1xuICAgIGNvbnN0IG0gPSBtZXRhbERhdGFTZXQubWV0YWxzW2lkXTtcbiAgICBhcHBlbmRNZXRhbFRhYmxlUm93KG0sIG1ldGFsVGFibGUpO1xuICB9XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkb3dubG9hZC1idG5cIikub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb3dubG9hZFRhYmxlQXNDc3YoXCJtZXRhbGF0aW9uLXRhYmxlXCIpO1xuICB9O1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVzZXQtYnRuXCIpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVzZXQoKTtcbiAgfTtcblxuICBjYWxjdWxhdGUoKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgc2V0dXBDYWxjdWxhdG9yKFwibWV0YWxhdGlvbi10YWJsZVwiKTtcbn0pO1xuIiwiLyoqXG4gKiBBbiBvYmplY3QgdG8gc3RvcmUgdmFsdWVzIGZvciBhIHNpbmdsZSBtZXRhbCBhbmQgY2FsY3VsYXRlIGRlbHRhIEcgdmFsdWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRhbCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc3ltYm9sOiBzdHJpbmc7XG4gIF9hZmZpbml0eTogbnVtYmVyO1xuICBfbWV0YWxhdGlvbkRlbHRhRzogbnVtYmVyO1xuICBfYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb246IG51bWJlcjtcbiAgX2ludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUc6IG51bWJlcjtcbiAgaWRTdWZmaXg6IHN0cmluZztcbiAgdmFsaWRhdG9yOiB0eXBlb2YgUHJveHk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN5bWJvbDogc3RyaW5nLFxuICAgIGFmZmluaXR5OiBudW1iZXIsXG4gICAgY29uY2VudHJhdGlvbjogbnVtYmVyXG4gICkge1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5zeW1ib2wgPSBzeW1ib2w7XG4gICAgdGhpcy5hZmZpbml0eSA9IGFmZmluaXR5O1xuICAgIHRoaXMuYnVmZmVyZWRNZXRhbENvbmNlbnRyYXRpb24gPSBjb25jZW50cmF0aW9uO1xuICAgIHRoaXMuaWRTdWZmaXggPSBzeW1ib2wudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGNhbGN1bGF0ZURlbHRhRyhtb2xlVmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuICg4LjMxNCAqIDI5OC4xNSAqIE1hdGgubG9nKG1vbGVWYWx1ZSkpIC8gMTAwMDtcbiAgfVxuXG4gIGNoZWNrUmFuZ2UodmFsOiBudW1iZXIsIGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgaWYgKGlzTmFOKHZhbCkpIHRocm93IG5ldyBSYW5nZUVycm9yKGZpZWxkTmFtZSArIFwiIG11c3QgYmUgc2V0XCIpO1xuICAgIGlmICh2YWwgPCAxZS0zMCB8fCB2YWwgPiAxMDAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihmaWVsZE5hbWUgKyBcIiBtdXN0IGJlIGJldHdlZW4gMWUtMzAgYW5kIDEwMDBcIik7XG4gICAgfVxuICB9XG5cbiAgZ2V0IGFmZmluaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2FmZmluaXR5O1xuICB9XG5cbiAgc2V0IGFmZmluaXR5KHZhbDogbnVtYmVyKSB7XG4gICAgdGhpcy5jaGVja1JhbmdlKHZhbCwgXCJBZmZpbml0eVwiKTtcbiAgICB0aGlzLl9hZmZpbml0eSA9IHZhbDtcbiAgICB0aGlzLl9tZXRhbGF0aW9uRGVsdGFHID0gdGhpcy5jYWxjdWxhdGVEZWx0YUcodGhpcy5fYWZmaW5pdHkpO1xuICB9XG5cbiAgZ2V0IG1ldGFsYXRpb25EZWx0YUcoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YWxhdGlvbkRlbHRhRztcbiAgfVxuXG4gIGdldCBidWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbjtcbiAgfVxuXG4gIHNldCBidWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbih2YWw6IG51bWJlcikge1xuICAgIHRoaXMuY2hlY2tSYW5nZSh2YWwsIFwiQnVmZmVyZWQgbWV0YWwgY29uY2VudHJhdGlvblwiKTtcbiAgICB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvbiA9IHZhbDtcbiAgICB0aGlzLl9pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHID0gdGhpcy5jYWxjdWxhdGVEZWx0YUcoXG4gICAgICB0aGlzLl9idWZmZXJlZE1ldGFsQ29uY2VudHJhdGlvblxuICAgICk7XG4gIH1cblxuICBnZXQgaW50cmFjZWxsdWxhckF2YWlsYWJsZURlbHRhRygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHO1xuICB9XG5cbiAgc2V0IGludHJhY2VsbHVsYXJBdmFpbGFibGVEZWx0YUcodmFsOiBudW1iZXIpIHtcbiAgICBpZiAodmFsIDw9IDApXG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludHJhY2VsbHVsYXIgYXZhaWxhYmxlIOKIhkcgbXVzdCBiZSA+IDBcIik7XG4gICAgdGhpcy5faW50cmFjZWxsdWxhckF2YWlsYWJsZURlbHRhRyA9IHZhbDtcbiAgfVxuXG4gIGdldFByb3BlcnR5KGtleToga2V5b2YgTWV0YWwpIHtcbiAgICByZXR1cm4gdGhpc1trZXldO1xuICB9XG59XG5cbmNvbnN0IE1FVEFMX1ZBTFM6IEFycmF5PFtzdHJpbmcsIHN0cmluZywgbnVtYmVyLCBudW1iZXJdPiA9IFtcbiAgW1wiTWFnbmVzaXVtXCIsIFwiTWdcIiwgMWUzLCAyLjdlLTNdLFxuICBbXCJNYW5nYW5lc2VcIiwgXCJNblwiLCAxZTMsIDIuNmUtNl0sXG4gIFtcIklyb25cIiwgXCJGZVwiLCAxZS02LCA0LjhlLThdLFxuICBbXCJDb2JhbHRcIiwgXCJDb1wiLCAzZS0xMSwgMi41ZS05XSxcbiAgW1wiTmlja2VsXCIsIFwiTmlcIiwgOS44ZS0xMCwgMS44ZS0xM10sXG4gIFtcIkNvcHBlclwiLCBcIkN1XCIsIDIuNGUtMTYsIDEuMmUtMThdLFxuICBbXCJaaW5jXCIsIFwiWm5cIiwgMS45ZS0xMywgMS4xOWUtMTJdLFxuXTtcblxuZXhwb3J0IGNsYXNzIE1ldGFsRGF0YVNldCB7XG4gIG1ldGFsczogeyBbaWQ6IHN0cmluZ106IE1ldGFsIH07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5tZXRhbHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG0gb2YgTUVUQUxfVkFMUykge1xuICAgICAgdGhpcy5tZXRhbHNbbVsxXS50b0xvd2VyQ2FzZSgpXSA9IG5ldyBNZXRhbCguLi5tKTtcbiAgICB9XG4gIH1cblxuICBjYWxjdWxhdGVPY2N1cGFuY3koKTogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9IHtcbiAgICBjb25zdCBleHBTY2FsZWREaWZmZXJlbmNlczogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XG4gICAgbGV0IHRvdGFsRGlmZnMgPSAwO1xuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5tZXRhbHMpIHtcbiAgICAgIGNvbnN0IG0gPSB0aGlzLm1ldGFsc1tpZF07XG4gICAgICBleHBTY2FsZWREaWZmZXJlbmNlc1tpZF0gPSBNYXRoLmV4cChcbiAgICAgICAgKDEwMDAgKiAobS5pbnRyYWNlbGx1bGFyQXZhaWxhYmxlRGVsdGFHIC0gbS5tZXRhbGF0aW9uRGVsdGFHKSkgL1xuICAgICAgICAgICg4LjMxNCAqIDI5OC4xNSlcbiAgICAgICk7XG4gICAgICB0b3RhbERpZmZzICs9IGV4cFNjYWxlZERpZmZlcmVuY2VzW2lkXTtcbiAgICB9XG5cbiAgICBjb25zdCBvY2N1cGFuY2llczogeyBbaWQ6IHN0cmluZ106IG51bWJlciB9ID0ge307XG4gICAgbGV0IHRvdGFsT2NjdXBhbmN5ID0gMDtcblxuICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5tZXRhbHMpIHtcbiAgICAgIG9jY3VwYW5jaWVzW2lkXSA9IGV4cFNjYWxlZERpZmZlcmVuY2VzW2lkXSAvICgxICsgdG90YWxEaWZmcyk7XG4gICAgICB0b3RhbE9jY3VwYW5jeSArPSBvY2N1cGFuY2llc1tpZF07XG4gICAgfVxuICAgIG9jY3VwYW5jaWVzW1widG90YWxcIl0gPSB0b3RhbE9jY3VwYW5jeTtcblxuICAgIHJldHVybiBvY2N1cGFuY2llcztcbiAgfVxufVxuIl19
